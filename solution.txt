LAB | Temporary Tables, Views and CTEs

Challenge
Creating a Customer Summary Report

In this exercise, you will create a customer summary report that summarizes key information about customers in the Sakila database, including their rental history and payment details. The report will be generated using a combination of views, CTEs, and temporary tables.

Step 1: Create a View
First, create a view that summarizes rental information for each customer. The view should include the customer's ID, name, email address, and total number of rentals (rental_count).

CREATE VIEW sakila.rental_information_for_each_customer AS (
SELECT c.customer_id, c.first_name, c.email, COUNT(rental_id)
FROM sakila.customer as c
JOIN sakila.rental as r
ON c.customer_id = r.customer_id
);

SELECT * FROM rental_information_for_each_customer;

Step 2: Create a Temporary Table
Next, create a Temporary Table that calculates the total amount paid by each customer (total_paid). The Temporary Table should use the rental summary view created in Step 1 to join with the payment table and calculate the total amount paid by each customer.

CREATE TEMPORARY TABLE total_amount_paid_by_each_customer AS (
  SELECT SUM(amount) AS total_amount, first_name
  FROM sakila.rental_information_for_each_customer as rif
  JOIN sakila.rental_information_for_each_customer as rif
  ON p.customer_id = rif.customer_id
  );
  
SELECT * from total_amount_paid_by_each_customer;

Step 3: Create a CTE and the Customer Summary Report
Create a CTE that joins the rental summary View with the customer payment summary Temporary Table created in Step 2. The CTE should include the customer's name, email address, rental count, and total amount paid.

Next, using the CTE, create the query to generate the final customer summary report, which should include: customer name, email, rental_count, total_paid and average_payment_per_rental, this last column is a derived column from total_paid and rental_count.

-- Step 1: Create the CTE

WITH customer_summary AS (
	SELECT first_name,email,COUNT(rental_id),tap.SUM(amount)
	FROM sakila.rental_information_for_each_customer as rif
	JOIN sakila.total_amount_paid_by_each_customer as tap
	ON rif.customer_id = tap.customer_id
);

-- Step 2: Generate the customer summary report
SELECT
  first_name,
  email,
  COUNT(rental_id),
  SUM(amount),
  SUM(amount) / COUNT(rental_id) AS average_payment_per_rental
FROM customer_summary;